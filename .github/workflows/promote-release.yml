name: Promote Release to Main

on:
  push:
    branches:
      - release  # Trigger whenever something is pushed to 'release'

permissions:
  contents: write
  pull-requests: write

jobs:
  promote-release:
    name: Validate & Promote Release ‚Üí Main
    runs-on: ubuntu-latest

    steps:
      # -----------------------------
      # 1. Checkout repository
      # -----------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------
      # 2. Set up Salesforce CLI
      # -----------------------------
      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      # -----------------------------
      # 3. Authenticate to your sandbox
      # -----------------------------
      # Store your sandbox auth URL in a GitHub secret called SF_AUTH_URL
      # (use: `sf org display --verbose` locally to get it)
      - name: Authenticate to Salesforce org
        run: echo $SF_AUTH_URL > auth-url.txt && sf org login sfdx-url --sfdx-url-file auth-url.txt
        env:
          SF_AUTH_URL: ${{ secrets.SF_AUTH_URL }}

      # -----------------------------
      # 4. Run Apex tests from manifest or all if empty
      # -----------------------------
      - name: Run Apex Tests
        id: run_tests
        run: |
          echo "üöÄ Checking for test-manifest.txt..."
          if [ -f test-manifest.txt ]; then
            TEST_CLASSES=$(grep -v '^\s*$' test-manifest.txt | paste -sd, -)
          else
            TEST_CLASSES=""
          fi

          if [ -z "$TEST_CLASSES" ]; then
            echo "‚öôÔ∏è No test-manifest.txt found or it's empty ‚Äî running all tests..."
            sf apex run test --target-org MySandbox --wait 30 --result-format human --output-dir test-results
          else
            echo "üéØ Running tests: $TEST_CLASSES"
            sf apex run test --target-org MySandbox --tests "$TEST_CLASSES" --wait 30 --result-format human --output-dir test-results
          fi

      # -----------------------------
      # 5. Merge release into main if tests succeed
      # -----------------------------
      - name: Configure Git
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch branches
        if: success()
        run: |
          git fetch origin main
          git fetch origin release

      - name: Checkout main
        if: success()
        run: git checkout main

      - name: Merge release into main
        if: success()
        run: git merge origin/release --no-edit

      - name: Push to main
        if: success()
        run: git push origin main

      - name: Notify success
        if: success()
        run: echo "‚úÖ Successfully merged 'release' into 'main' after passing tests."

      - name: Notify failure
        if: failure()
        run: echo "‚ùå Tests failed ‚Äî release not merged to main."